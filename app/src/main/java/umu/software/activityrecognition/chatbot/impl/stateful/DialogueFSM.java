package umu.software.activityrecognition.chatbot.impl.stateful;


import com.github.oxo42.stateless4j.StateMachine;
import com.github.oxo42.stateless4j.StateMachineConfig;
import com.github.oxo42.stateless4j.triggers.TriggerWithParameters1;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

import java.util.Collection;
import java.util.Map;

import umu.software.activityrecognition.chatbot.ChatbotResponse;




/**
 * Finite State Machine to handle dialogues
 */
public class DialogueFSM
{
    public enum Trigger
    {
        EVENT, MESSAGE, RESET;
    }


    private ChatbotResponse currentResponse = new ChatbotResponse();
    private final DialogueState s0 = new DialogueState();
    private final StateMachineConfig<DialogueState, Trigger> config = new StateMachineConfig<>();
    private final StateMachine<DialogueState, Trigger> stateMachine = new StateMachine<>(s0, config);

    private final Map<DialogueState, Collection<DialogueState>> states = Maps.newHashMap();

    private boolean initialized = false;




    public void resetToinitialState()
    {
        initializeIfNeeded();
        stateMachine.fire(Trigger.RESET);
        currentResponse = new ChatbotResponse();
    }


    /**
     * Handle an event through a FSM
     * @param eventName input event sent by the user
     * @return the response generated by the FSM
     */
    public ChatbotResponse onEvent(String eventName)
    {
        initializeIfNeeded();
        stateMachine.fire(new TriggerWithParameters1<>(Trigger.EVENT, String.class), eventName);
        return currentResponse;
    }

    /**
     * Handle a message through a FSM
     * @param message input user message
     * @return the response generated by the FSM
     */
    public ChatbotResponse onMessage(String message)
    {
        initializeIfNeeded();
        stateMachine.fire(new TriggerWithParameters1<>(Trigger.MESSAGE, String.class), message);
        return currentResponse;
    }

    /**
     * Add a transition between states.
     * If multiple states can be transitioned at any given time only the first one is fired
     * @param src source state
     * @param dest destination state
     */
    public void addTransition(DialogueState src, DialogueState dest)
    {
        if (initialized) throw new RuntimeException("FSM is already initialized");
        if (!states.containsKey(src)) {
            states.put(src, Lists.newArrayList());
            config.configure(src).permit(Trigger.RESET, s0);
        }

        if (states.get(src).contains(dest)) return;

        states.get(src).add(dest);
        config.configure(dest).permit(Trigger.RESET, s0);
    }




    public void initializeIfNeeded()
    {
        if (initialized) return;
        initialized = true;

        for (DialogueState src : states.keySet())
        {
            config.configure(src)
                    .permitDynamic(
                            new TriggerWithParameters1<>(Trigger.EVENT, String.class),
                            (arg) -> {
                                for (DialogueState dest : states.get(src))
                                    if (dest.testEvent(arg))
                                        return dest;
                                return s0;

                            },
                            (arg) ->{
                                for (DialogueState dest : states.get(src))
                                    if (dest.testEvent(arg))
                                    {
                                        if (dest.resetResponse())
                                            currentResponse = new ChatbotResponse();
                                        dest.onEvent(arg, currentResponse);
                                        break;
                                    }
                            }
                    )
                    .permitDynamic(
                            new TriggerWithParameters1<>(Trigger.MESSAGE, String.class),
                            (arg) -> {
                                for (DialogueState dest : states.get(src))
                                    if (dest.testMessage(arg))
                                        return dest;
                                return s0;

                            },
                            (arg) ->{
                                for (DialogueState dest : states.get(src))
                                    if (dest.testMessage(arg))
                                    {
                                        if (dest.resetResponse())
                                            currentResponse = new ChatbotResponse();
                                        dest.onMessage(arg, currentResponse);
                                        break;
                                    }
                            }
                    );
        }
    }

}
